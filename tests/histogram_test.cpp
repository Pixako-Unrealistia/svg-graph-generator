#include "OrderedMap.hpp"
#include "JsonReader.hpp"
#include "CSVReader.hpp"
#include "Chart.hpp"

#include <list>
#include <string>
#include <stdexcept>
#include <algorithm>

const std::string EXPECTED_OUTPUT = R"(Cookies     : **************************************************************************************************************** 112
Brownies    : **************************************************************************************************** 100
Cake        : *************************************************** 50.5
Candy       : **************************************************************************************** 88
Caramel     : ******************************************** 44
Yuzu        : ******************************* 30.69
Sushi       : **************************************************************************** 75.3
Pizza       : ****************************************************************************************** 90
Burger      : ************************************************************* 60.8
Fries       : ******************************************************************************** 80
Ice Cream   : ************************************************************************************************************************* 120.2
Hot Dogs    : ******************************************************** 55.55
Salad       : ***************************************** 40.6
Steak       : ****************************** 30
Chicken     : *********************************************************************** 70.1
Fish        : ************************* 25
Soup        : ******************************************************************************************* 90.5
Banana      : ****************************************************************************************************************************** 125.5
Apple       : **************************************************************************************************** 100
Orange      : **************************************************************************** 75.8
Grapes      : ******************************************************* 55
Watermelon  : ************************************************************************************************************************ 120
Pineapple   : *********************************************************************** 70.2
Mango       : **************************************** 40
Papaya      : ************************* 25
Pomegranate : ******************************************************************************************* 90.6
Strawberries: ***************************************************************** 65
Blueberries : *************************************************** 50.3
Raspberries : ******************************* 30.4
Blackberries: *********************************** 35
Kiwi        : ********************************************************************************* 80.1
Cherry      : *********************************************************************************************** 95
Plum        : ************************************************** 50
Apricot     : ************************************ 35.5
Peach       : *************************************************************************** 75
Nectarine   : ******************************************************** 55.9)";

std::string removeNewLines(std::string str)
{
    str.erase(std::remove(str.begin(), str.end(), '\r'), str.end());
    str.erase(std::remove(str.begin(), str.end(), '\n'), str.end());
    return str;
}

int main(int argc, char *argv[])
{
    const std::string settings_filename = "test_settings.json";
    const std::string data_filename = "test_data.csv";

    JsonReader jsonReader;
    CSVReader csvReader;

    jsonReader.readFile(settings_filename);
    csvReader.readFile(data_filename);

    const std::vector<std::string> &settings_data = jsonReader.getData();
    const OrderedMap<std::string, double> &csv_data = csvReader.getData();

    Chart chart = Chart(
        Chart::typeFromString(settings_data[0]), settings_data[1], settings_data[2], settings_data[3], settings_data[4], csv_data);

    std::string output = chart.getHistogramChartString();

    if (removeNewLines(output) == removeNewLines(EXPECTED_OUTPUT))
    {
        return 0;
    }
    else
    {
        throw std::runtime_error("Expected: " + EXPECTED_OUTPUT + "\n\nGot: " + output);
        return 1;
    }
}